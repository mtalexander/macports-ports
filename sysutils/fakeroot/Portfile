# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                fakeroot
version             1.28
revision            0
checksums           rmd160  aca32d86c964e0eae53cbbe2ccc764fe463c3fd6 \
                    sha256  56d405e36ff685f83879be08fdd654255ab9aa38632b4605a98e896ad63990c2 \
                    size    546234

categories          sysutils
license             GPL-3+
maintainers         {ryandesign @ryandesign} openmaintainer

description         Tool for simulating superuser privileges
long_description    fakeroot runs a command in an environment where it \
                    appears to have root privileges for file manipulation. \
                    It does this by means \
                    of LD_PRELOAD and SYSV IPC (or TCP) trickery.

homepage            https://wiki.debian.org/FakeRoot/

master_sites        debian:f/${name}
distname            ${name}_${version}.orig
worksrcdir          ${name}-${version}

patchfiles          patch-message.h.diff

# Build settings adapted from instructions at
# https://github.com/mackyle/fakeroot/blob/787d757/README_MACOSX.txt

use_autoreconf      yes
autoreconf.cmd      ./bootstrap
autoreconf.pre_args
autoreconf.args
configure.checks.implicit_function_declaration.whitelist-append strchr
depends_build       port:autoconf port:automake port:libtool
depends_skip_archcheck-append libtool

configure.args      --disable-static

# The configure script is unable to detect macOS on its own because it
# uses the C preprocessor to do so but the CPP variable is empty because
# for some reason the "how to run the C preprocessor" step doesn't get
# run. I suspect this is due to a mistake in configure.ac but I don't
# have sufficient autoconf knowledge to identify it.
configure.env-append "CPP=${configure.cc} -E"

platform darwin {
    if {${os.major} == 18 || ${os.major} == 19} {
        universal_variant                       no
    } else {
        default_variants                        +universal
        variant_set                             universal

        configure.universal_archs               x86_64

        if {${os.major} <= 9} {
            configure.universal_archs-append    ppc64
        }

        if {${os.major} <= 10} {
            configure.universal_archs-append    ppc
        }

        if {${os.major} <= 17} {
            configure.universal_archs-append    i386
        }

        if {${os.major} >= 20} {
            configure.universal_archs-append    arm64
        }

        if {${os.major} == 8} {
            configure.cflags-append             -mmacosx-version-min=10.4
        }

        if {${os.major} >= 9 && ${os.major} <= 10} {
            configure.ldflags-append            -Wl,-force_cpusubtype_ALL
        }
    }

    if {${os.major} >= 10} {
        configure.cflags-append                 -Wno-deprecated-declarations
    }

    if {${os.major} >= 11} {
        configure.cflags-append                 -Wno-extra-tokens
    }
}

test.run            yes
test.target         check

livecheck.type      regex
livecheck.url       https://packages.debian.org/unstable/fakeroot
livecheck.regex     {fakeroot \(([\d.]+)}
