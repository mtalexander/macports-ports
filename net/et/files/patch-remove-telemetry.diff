From 9df261cd2bcc433947ecac7a0b7b052cee1ed3a8 Mon Sep 17 00:00:00 2001
From: Zero King <l2dy@macports.org>
Date: Sun, 9 May 2021 16:09:19 +0000
Subject: [PATCH] Remove telemetry

---
 src/base/Headers.hpp              |   7 --
 src/terminal/TelemetryService.cpp | 137 ------------------------------
 2 files changed, 144 deletions(-)

diff --git src/base/Headers.hpp src/base/Headers.hpp
index 147835c8..a67855f8 100644
--- src/base/Headers.hpp
+++ src/base/Headers.hpp
@@ -82,13 +82,6 @@ inline int close(int fd) { return ::closesocket(fd); }
 #include <unordered_set>
 #include <vector>
 
-#if __has_include(<filesystem>)
-#include <filesystem>
-#else
-#include <experimental/filesystem>
-using namespace std::experimental;
-#endif
-
 #include "ET.pb.h"
 #include "ETerminal.pb.h"
 #include "ThreadPool.h"
diff --git src/terminal/TelemetryService.cpp src/terminal/TelemetryService.cpp
index 830d31b5..5bb6e91c 100644
--- src/terminal/TelemetryService.cpp
+++ src/terminal/TelemetryService.cpp
@@ -86,143 +86,6 @@ TelemetryService::TelemetryService(const bool _allow,
   if (disableTelementry) {
     allowed = false;
   }
-  if (allowed) {
-    auto telemetryConfigPath = sago::getConfigHome() + "/et/telemetry.ini";
-    auto telemetryId = sole::uuid4();
-    if (filesystem::exists(telemetryConfigPath)) {
-      // Load the config file
-      CSimpleIniA ini(true, false, false);
-      SI_Error rc = ini.LoadFile(telemetryConfigPath.c_str());
-      if (rc == 0) {
-        const char* telemetryIdString = ini.GetValue("Sentry", "Id", NULL);
-        if (telemetryIdString) {
-          telemetryId = sole::rebuild(telemetryIdString);
-        } else {
-          STFATAL << "Invalid telemetry config";
-        }
-      } else {
-        STFATAL << "Invalid config file: " << telemetryConfigPath;
-      }
-    } else {
-      // Ensure directory exists
-      filesystem::create_directories(sago::getConfigHome() + "/et");
-
-      // Create ini
-      CSimpleIniA ini(true, false, false);
-      ini.SetValue("Sentry", "Id", telemetryId.str().c_str());
-      ini.SaveFile(telemetryConfigPath.c_str());
-
-      // Let user know about telemetry
-      CLOG(INFO, "stdout")
-          << "Eternal Terminal collects crashes and errors in order to help us "
-             "improve your experience.\nThe data collected is anonymous.\nYou "
-             "can opt-out of telemetry by setting the environment variable "
-             "ET_NO_TELEMETRY to any non-empty value."
-          << endl;
-    }
-
-#ifdef USE_SENTRY
-    sentry_options_t* options = sentry_options_new();
-    logHttpClient->set_compress(true);
-
-    // this is an example. for real usage, make sure to set this explicitly to
-    // an app specific cache location.
-    sentry_options_set_database_path(options, databasePath.c_str());
-    sentry_options_set_dsn(
-        options,
-        "https://51ec60d489224f1da2b63c912a5c7fad@o496602.ingest.sentry.io/"
-        "5574732");
-    sentry_options_set_symbolize_stacktraces(options, true);
-    sentry_options_set_release(options, "EternalTerminal@" ET_VERSION);
-    sentry_options_set_environment(options, environment.c_str());
-
-    sentry_init(options);
-
-    auto sentryShutdownHandler = [](int i) { shutdownTelemetry(); };
-    sentry_value_t user = sentry_value_new_object();
-    sentry_value_set_by_key(user, "id",
-                            sentry_value_new_string(telemetryId.str().c_str()));
-    sentry_set_user(user);
-
-    vector<int> signalsToCatch = {
-#ifdef SIGINT
-        SIGINT,
-#endif
-#ifdef SIGILL
-        SIGILL,
-#endif
-#ifdef SIGABRT
-        SIGABRT,
-#endif
-#ifdef SIGFPE
-        SIGFPE,
-#endif
-#ifdef SIGSEGV
-        SIGSEGV,
-#endif
-#ifdef SIGTERM
-        SIGTERM,
-#endif
-#ifdef SIGKILL
-        SIGKILL,
-#endif
-    };
-    for (auto it : signalsToCatch) {
-      signal(it, sentryShutdownHandler);
-    }
-#endif
-    atexit([] { shutdownTelemetry(); });
-
-    el::Helpers::installLogDispatchCallback<TelemetryDispatcher>(
-        "TelemetryDispatcher");
-    auto* dispatcher = el::Helpers::logDispatchCallback<TelemetryDispatcher>(
-        "TelemetryDispatcher");
-
-    dispatcher->setEnabled(true);
-
-    logSendingThread.reset(new thread([this]() {
-      auto nextDumpTime = std::chrono::system_clock::now();
-      while (!shuttingDown) {
-        string payload;
-        int logBufferSize;
-        {
-          lock_guard<recursive_mutex> guard(logMutex);
-          logBufferSize = (int)logBuffer.size();
-        }
-        if (logBufferSize) {
-          if (logBufferSize >= 1024 ||
-              nextDumpTime < std::chrono::system_clock::now()) {
-            nextDumpTime =
-                std::chrono::system_clock::now() + chrono::seconds(30);
-            {
-              lock_guard<recursive_mutex> guard(logMutex);
-              payload = json(logBuffer).dump(4);
-              logBuffer.clear();
-            }
-            httplib::Headers headers;
-            headers.emplace("DD-API-KEY", "e5e757f30a9e567f95b16b7673b09253");
-
-            logHttpClient->set_connection_timeout(0,
-                                                  300000);  // 300 milliseconds
-            logHttpClient->set_read_timeout(1, 0);          // 1 second
-            logHttpClient->set_write_timeout(1, 0);         // 1 second
-
-            if (shuttingDown) {
-              // httplib isn't exit-safe, so we try our best to avoid calling it
-              // on shutdown
-              break;
-            }
-            logHttpClient->Post(
-                "/v1/input/"
-                "pubfe47c2f8dfb3e8c26eb66ba4a456ec79?ddsource=browser&ddtags="
-                "sdk_version:2.1.1",
-                headers, payload, "application/json");
-          }
-        }
-        this_thread::sleep_for(chrono::milliseconds(100));
-      }
-    }));
-  }
 }
 
 TelemetryService::~TelemetryService() {
-- 
2.31.1

